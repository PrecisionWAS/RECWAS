package myMathLib;

public class ArrayFuncs {

	public static double[] linearCombination(double array_a[], double[] array_b, double coef_a, double coef_b){
		if(array_a.length!=array_b.length){
			System.out.println("array_a.length!=array_b.length in myMathLib.ArrayFuncs.linearCombination");
			return null;
		}
		int len=array_a.length;
		double[] result=new double[len];
		for(int i=0;i<len;i++){
			result[i]=coef_a*array_a[i]+coef_b*array_b[i];
		}
		return result;
	}
	
	/*
	 * before plotting, remove infinites that are generated by log(P) when P=0.
	 */
	public static void remove_infinites(double[] Y){
		double max=-Double.MAX_VALUE;
		for(int k=0;k<Y.length;k++){
			if(!Double.isInfinite(Y[k]) && Y[k]>max)max=Y[k];
		}
		for(int k=0;k<Y.length;k++){
			if(Double.isInfinite(Y[k]))Y[k]=max+1;
		}
	}
	
	public static int compare_array(int[] a1, int[] a2){
		if(a1.length!=a2.length){
			System.out.println("Array length of a1 and a2 differs. Can't sort!");
			return -100;
		}
		for(int k=0;k<a1.length;k++){
			if(a1[k]>a2[k])return 1;
			else if(a1[k]<a2[k])return -1;
		}
		return 0;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
